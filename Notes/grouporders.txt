on a particular day particular person order different items at different times then club them



import React, { useEffect, useState } from "react";
import { backendUrl } from "../App";
import axios from "axios";
import { toast } from "react-toastify";
import { FaBoxOpen } from "react-icons/fa";

const Orders = ({ token }) => {
  const [orders, setOrders] = useState([]);

  const fetchAllOrders = async () => {
    if (!token) {
      return null;
    }

    try {
      const response = await axios.post(backendUrl + "/api/order/list", {}, { headers: { token } });
      if (response.data.success) {
        setOrders(response.data.orders);
      } else {
        toast.error(response.data.message);
      }
    } catch (error) {
      toast.error(error.message);
    }
  };

  useEffect(() => {
    fetchAllOrders();
  }, [token]);

  // Group orders by customer and date
  const groupOrdersByCustomerAndDate = () => {
    const grouped = {};

    orders.forEach((order) => {
      const date = new Date(order.createdAt).toLocaleDateString(); // Format date
      const customerKey = `${order.firstName} ${order.lastName}`;
      const groupKey = `${customerKey} - ${date}`;

      if (!grouped[groupKey]) {
        grouped[groupKey] = {
          customerName: customerKey,
          date,
          items: [],
        };
      }

      // Merge all items for the same group
      grouped[groupKey].items = [...grouped[groupKey].items, ...order.items];
    });

    return Object.values(grouped);
  };

  const groupedOrders = groupOrdersByCustomerAndDate();

  return (
    <div>
      <h3>Order Page</h3>
      <div>
        {groupedOrders.length > 0 ? (
          groupedOrders.map((group, index) => (
            <div key={index} style={{ border: "1px solid #ddd", margin: "10px", padding: "10px" }}>
              <div style={{ display: "flex", alignItems: "center", marginBottom: "10px" }}>
                <FaBoxOpen size={20} style={{ marginRight: "10px" }} />
                <div>
                  <p><strong>Customer:</strong> {group.customerName}</p>
                  <p><strong>Date:</strong> {group.date}</p>
                </div>
              </div>
              <div>
                {group.items.map((item, itemIndex) => (
                  <p key={itemIndex}>
                    {item.name} x {item.quantity}
                  </p>
                ))}
              </div>
            </div>
          ))
        ) : (
          <p>No orders found.</p>
        )}
      </div>
    </div>
  );
};

export default Orders;
